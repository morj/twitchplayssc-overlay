{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","u","possibleConstructorReturn","getPrototypeOf","call","state","mode","stats","apm","players","gamesWon","gamesLost","data","text","eventSource","EventSource","lastChatMessage","added","oldData","slice","Math","max","length","console","log","push","setState","assign","app","onmessage","e","payload","JSON","parse","msg","pushData","scrollIntoView","behavior","_this2","react_default","a","createElement","className","compact","map","item","index","key","ref","el","full","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1940e5a1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\n\n// import {getInitialData} from './DataProvider';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        const u = '-';\n        this.state = {\n            mode: 'full',\n            stats: {apm: u, players: u, gamesWon: u, gamesLost: u,},\n            data: [{text: 'Chat'}]\n        };\n        this.eventSource = new EventSource('http://localhost:8082/persist');\n        this.lastChatMessage = null;\n        // window.setInterval(() => this.pushData({text: 'this.eventSource = new EventSource(\\'http://localhost:8082/persist\\');'}), 2000);\n    }\n\n    pushData(added) {\n        let oldData = this.state.data;\n        let data = oldData.slice(Math.max(oldData.length - 100, 0));\n        console.log(data);\n        data.push(added);\n        this.setState(Object.assign(this.state, {data: data}));\n    };\n\n    componentDidMount() {\n        const app = this;\n\n        this.eventSource.onmessage = (e) => {\n            let payload = JSON.parse(e.data);\n            switch (payload['command'] || 'whatever') {\n                case 'chatMessage':\n                    let msg = payload['message'];\n                    app.pushData({text: msg['author'] + ': ' + msg['text']});\n                    break;\n                case 'update':\n                    app.setState(Object.assign(app.state, payload));\n                    break;\n                default:\n                    console.log('pong');\n            }\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.lastChatMessage) {\n            this.lastChatMessage.scrollIntoView({behavior: \"smooth\"});\n        }\n    }\n\n    render() {\n        let app = this;\n        return (\n            <div className=\"App\">\n                {{\n                    compact: <div className=\"in-game-overlay\">\n                        <div className=\"left-panel\">\n                            <div className=\"stats\">\n                                <div className=\"players\">\n                                    <div className=\"item\">\n                                        Players {app.state.stats.players}\n                                    </div>\n                                    <div className=\"item\">\n                                        APM {app.state.stats.apm}\n                                    </div>\n                                </div>\n                                <div className=\"games\">\n                                    <div className=\"item\">\n                                        Games won {app.state.stats.gamesWon}, lost {app.state.stats.gamesLost}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"rtfm\">\n                                NOTE: If !$ or !money does not work for you,<br/>\n                                try following the channel and refreshing the page\n                            </div>\n                        </div>\n                        <div className=\"right-panel chat\">{\n                            app.state.data.map((item, index) => <div key={index} className=\"message\">\n                                {item.text}\n                            </div>)\n                        }\n                            <div className=\"cursor\" ref={(el) => {\n                                this.lastChatMessage = el;\n                            }}/>\n                        </div>\n                    </div>,\n                    full: <div className=\"lobby-overlay\">\n                        <div className=\"lobby-panel chat\">{\n                            app.state.data.map((item, index) => <div key={index} className=\"message\">\n                                {item.text}\n                            </div>)\n                        }\n                            <div className=\"cursor\" ref={(el) => {\n                                this.lastChatMessage = el;\n                            }}/>\n                        </div>\n                    </div>\n                }[app.state.mode]}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}